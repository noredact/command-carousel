#Requires AutoHotkey v2.0
#SingleInstance
#include %A_ScriptDir%\dependencies\ToolTipEx\ToolTipEx.ahk



%%REPLACEWITHSUSPEND%%

class CycleSelector {
    scriptIsCycling := 0
    currentSect := 0
    ttMenuItems := []
    currentItems := {}
    triggerScript := "Abort"
    configPath := ""
    menus := Map()
    currentMenuName := ""
    menuCount := 0
    menuNum := 0
    sectionMenu := ""
    shiftedMenu := 0

    __New() {
        this.configPath := A_ScriptDir "\config.ini"
        this.resetVars()
        this.loadMenus()
    }

    resetVars() {
        this.scriptIsCycling := 0
        this.currentSect := 0
        this.ttMenuItems := []
        this.currentItems := {}
        this.triggerScript := "Abort"
        this.currentMenuName := ""
        this.menuNum := 0
        this.sectionMenu := ""
        this.shiftedMenu := 0
    }

    loadMenus() {
        menuCount := 1
        while (menuNum := IniRead(this.configPath, "Menus", menuCount, "")) {
            menuCount++
        }
        this.menuCount := menuCount
    }

    getMenuObj(index) {
        menuObj := {}
        menuObj.Name := IniRead(this.configPath, "Menu" index, "Name", "")
        menuObj.Items := ["Abort"]
        itemNum := 1
        while true {
            itemName := IniRead(this.configPath, "Menu" index, "Item" itemNum "Name", "")
            if (itemName = "")
                break
            menuObj.Items.Push(itemName)
            itemNum++
        }
        return menuObj
    }

    formatMenu(curPress, ttMenuItems) {
        toolTipMenu := this.currentMenuName "`n" "-----------------`n"
        curScript := ""
        for i, item in ttMenuItems {
            if (i == curPress) {
                toolTipMenu .= "> " item "`n"
                curScript := item
            } else {
                toolTipMenu .= "  " item "`n"
            }
        }
        return {cur: curScript, ttm: toolTipMenu, triggerIndex: curPress}
    }

    cycleShift(cycVar) {
        static pressedCount := 1
        if (this.scriptIsCycling == 0 || this.shiftedMenu == 1) {
            pressedCount := 2
            this.scriptIsCycling := 1
            this.shiftedMenu := 0
            goto make_the_menu
        }
        pressedCount += cycVar
        if pressedCount > this.ttMenuItems.Length
            pressedCount := 1
        make_the_menu:
        curOb := this.formatMenu(pressedCount, this.ttMenuItems)
        curMenu := curOb.ttm
        ToolTipEx curMenu ,,5
        this.triggerScript := curOb.triggerIndex
    }
}

selector := CycleSelector()


~%%REPLACEWITHLEADER%% & %%REPLACEWITHCYCLE%%:: {
    selector.currentSect += 1
    if (selector.currentSect == selector.menuCount)
        selector.currentSect := 1

    selector.menuNum := selector.currentSect
    menuObj := selector.getMenuObj(selector.currentSect)
    selector.currentMenuName := menuObj.Name
    menuItems := menuObj.Items
    selector.ttMenuItems := menuItems

    selector.sectionMenu := selector.formatMenu(1, menuItems)
    ToolTipEx selector.sectionMenu.ttm ,,5

    selector.scriptIsCycling := 1
    selector.shiftedMenu := 1
    selector.triggerScript := selector.sectionMenu.triggerIndex
}

#HotIf (selector.scriptIsCycling = 1)

~%%REPLACEWITHLEADER%% & %%REPLACEWITHSELECTOR%%:: {
    if selector.currentSect < 1
        return
    cycVar := 1
    selector.cycleShift(cycVar)
}

~%%REPLACEWITHLEADER%% Up:: {
    local_triggerScript := selector.triggerScript
    local_isCycling := selector.scriptIsCycling
    local_menuNum := selector.menuNum

    selector.resetVars()

    if local_isCycling = 0
        return

    selector.scriptIsCycling := 0
    ToolTipEx ,,5

    if (local_triggerScript == 1)
        return

    triggerScript := IniRead(selector.configPath, "Menu" local_menuNum, "Item" local_triggerScript - 1 "Path", "")
    Run triggerScript
}

#HotIf

